@model NewsFeedViewModel

@{
    ViewData["Title"] = "For you";
}

<head>
    <style>
        body {
            background: linear-gradient(to bottom, skyblue, lightgray);
            font-family: Arial, sans-serif;
        }

        .liked-by-link {
            color: black;
            text-decoration: none; 
        }

            .liked-by-link:hover {
                color: darkgray; 
            }

    </style>
</head>

<div class="container mt-4">
    <h1 class="text-center fw-bold text-primary">Welcome to Freedle</h1>

    <div class="row mt-4">
        <div class="col-md-3 bg-light text-center p-3 rounded">
            <h5 class="fw-bold">Left Section</h5>
            <p>Coming soon...</p>
        </div>

        <div class="col-md-6">
            <h2 class="text-center fw-bold mb-4">Последни публикации</h2>

            @if (Model.Posts.Any())
            {
                @foreach (var post in Model.Posts)
                {
                    <div class="card mb-4 post-card">
                        <div class="card-header d-flex align-items-center">
                            @{
                                var currentUserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                                var isUserLoggedIn = User.Identity.IsAuthenticated;
                                var isOwnPost = isUserLoggedIn && post.AuthorId == currentUserId;
                                var profileUrl = isUserLoggedIn
                                ? (isOwnPost ? Url.Action("MyProfile", "Home") : Url.Action("UserProfile", "Home", new { id = post.AuthorId }))
                                : Url.Action("Login", "Account", new { area = "Identity" });
                            }

                            <a href="@profileUrl" class="d-flex align-items-center text-decoration-none text-dark">
                                <img src="@post.AuthorProfilePictureUrl" class="rounded-circle me-2" width="40" height="40" />
                                <strong>@post.AuthorName</strong>
                            </a>
                            <span class="text-muted ms-auto">@post.CreatedOn</span>
                        </div>

                        <div class="card-body d-flex flex-column align-items-center">
                            @if (!string.IsNullOrEmpty(post.ImageUrl))
                            {
                                <img src="@post.ImageUrl" class="rounded border border-8 border-dark shadow-lg mb-2"
                                     alt="Post image" style="max-width: 75%; height: auto; display: block; margin: auto;" />
                            }
                            <p class="card-text">@post.Content</p>
                        </div>

                        <div class="card-footer d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center gap-2">
                                <button class="btn like-btn @(post.IsLikedByCurrentUser ? "btn-primary" : "btn-outline-primary") btn-sm"
                                        data-post-id="@post.Id">
                                    👍 <span class="like-count">@post.LikeCount</span>
                                </button>
                                <a href="#" class="btn btn-outline-secondary btn-sm comment-btn"
                                   data-url="@Url.Action("PostDetails", "Home", new { id = post.Id })">
                                    💬 Comments
                                </a>
                            </div>

                            @if (post.LikeCount > 0)
                            {
                                <a href="@Url.Action("LikedByList", "Home", new { postId = post.Id })"
                                   class="liked-by-link ms-auto text-dark text-decoration-none"
                                   data-post-id="@post.Id">
                                    Liked by 👁️ (@post.LikeCount)
                                </a>
                            }

                        </div>


                    </div>
                }
            }
            else
            {
                <p class="text-center text-muted">Все още няма публикации.</p>
            }
        </div>

        <div class="col-md-3 bg-light text-center p-3 rounded">
            <h5 class="fw-bold">Right Section</h5>
            <p>Coming soon...</p>
        </div>
    </div>
</div>

@Html.AntiForgeryToken()


<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll(".comment-btn").forEach(button => {
            button.addEventListener("click", function (event) {
                event.preventDefault();

                let isAuthenticated = @Json.Serialize(User.Identity.IsAuthenticated);

                if (isAuthenticated) {
                    window.location.href = this.dataset.url; // Пренасочване към PostDetails
                } else {
                    window.location.href = "/Identity/Account/Login";
                }
            });
        });

        document.querySelectorAll(".like-btn").forEach(button => {
            button.addEventListener("click", function () {
                let postId = this.getAttribute("data-post-id");
                let likeButton = this;
                let likeCountSpan = this.querySelector(".like-count");
                let likedByLink = document.querySelector(`.liked-by-link[data-post-id="${postId}"]`);

                fetch('@Url.Action("ToggleLike", "Home")', {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded",
                        "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: "postId=" + postId
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            likeCountSpan.textContent = data.likeCount;
                            likeButton.classList.toggle("btn-primary", data.isLiked);
                            likeButton.classList.toggle("btn-outline-primary", !data.isLiked);

                            if (data.likeCount > 0) {
                                if (!likedByLink) {
                                    likedByLink = document.createElement("a");
                                    likedByLink.className = "liked-by-link ms-auto text-dark text-decoration-none";
                                    likedByLink.setAttribute("data-post-id", postId);
                                    likedByLink.href = `@Url.Action("LikedByList", "Home")?postId=${postId}`;
                                    likeButton.closest(".card-footer").appendChild(likedByLink);
                                }
                                likedByLink.innerHTML = `Liked by 👁️ (${data.likeCount})`;
                            } else {
                                if (likedByLink) {
                                    likedByLink.remove();
                                }
                            }
                        } else {
                            alert(data.message);
                        }
                    })
                    .catch(error => console.error("Error:", error));
            });
        });

    });
</script>
