@using Freedle.Web.ViewModels
@model MessagesViewModel

@{
    ViewData["Title"] = "Съобщения";
}

<h2>Съобщения</h2>
<input type="hidden" id="csrfToken" value="@Html.AntiForgeryToken()" />

<div class="chat-container">
    <div class="chat-list">
        <h3>Вашите разговори</h3>
        <ul>
            @foreach (var conversation in Model.Conversations)
            {
                <li>
                    <a href="#" onclick="event.preventDefault(); loadChat(@conversation.Id, '@conversation.OtherUserName');">
                        @conversation.OtherUserName
                    </a>
                </li>
            }
        </ul>
    </div>

    <div class="chat-box">
        <div class="chat-header">
            <h3 id="chatHeader">Изберете разговор</h3>
        </div>
        <div class="chat-messages">
            <ul id="messagesList"></ul>
        </div>
        <div class="chat-input">
            <input type="text" id="messageInput" placeholder="Вашето съобщение" disabled />
            <button id="sendButton" disabled>Изпрати</button>
        </div>
    </div>
</div>

<style>
    .chat-container {
        display: flex;
        height: 80vh;
        border: 1px solid #ccc;
        border-radius: 10px;
        overflow: hidden;
    }

    .chat-list {
        width: 30%;
        background: #f5f5f5;
        padding: 15px;
        border-right: 1px solid #ccc;
        overflow-y: auto;
    }

        .chat-list ul {
            list-style: none;
            padding: 0;
        }

        .chat-list li {
            padding: 10px;
            border-bottom: 1px solid #ddd;
        }

        .chat-list a {
            text-decoration: none;
            color: #333;
            font-weight: bold;
            display: block;
        }

            .chat-list a:hover {
                color: #007bff;
            }

    .chat-box {
        width: 70%;
        display: flex;
        flex-direction: column;
        padding: 15px;
    }

    .chat-header {
        font-size: 18px;
        font-weight: bold;
        padding-bottom: 10px;
        border-bottom: 1px solid #ddd;
    }

    .chat-messages {
        flex-grow: 1;
        overflow-y: auto;
        padding: 10px;
        background: #fff;
    }

    .chat-input {
        display: flex;
        gap: 10px;
        padding-top: 10px;
    }

        .chat-input input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .chat-input button {
            background: #007bff;
            color: #fff;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
        }

            .chat-input button:disabled {
                background: #ccc;
                cursor: not-allowed;
            }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    var currentConversationId = "@Model.SelectedConversationId" || null;
    var currentUserName = "@Model.CurrentUserName";
    var currentUserProfilePicture = "@Model.CurrentUserProfilePicture" || "/images/default-avatar.jpg";
    var sendMessageUrl = "@Url.Action("SendMessage", "Home")";
    var messagesUrl = "@Url.Action("Messages", "Home")";

    var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

    connection.start()
        .then(() => console.log("✅ SignalR стартиран успешно!"))
        .catch(err => console.error("❌ Грешка при стартиране на SignalR:", err));

    function loadChat(conversationId, userName) {
        console.log("🔵 Зареждане на чат с ID:", conversationId, "и потребител:", userName);
        currentConversationId = conversationId;
        document.getElementById("chatHeader").innerText = "Чат с " + userName;
        document.getElementById("messageInput").disabled = false;
        document.getElementById("sendButton").disabled = false;
        loadMessages(conversationId);

        // 🔥 Присъединяване към SignalR група за този разговор
        connection.invoke("JoinConversation", conversationId)
            .catch(err => console.error("❌ Грешка при присъединяване към разговора:", err));
    }

    function loadMessages(conversationId) {
        fetch(`/Home/GetMessages?conversationId=${conversationId}`)
            .then(response => response.json())
            .then(messages => {
                console.log("📨 Получени съобщения:", messages);
                if (!Array.isArray(messages)) {
                    console.error("❌ [ERROR] Получените данни не са масив!", messages);
                    return;
                }

                let messagesList = document.getElementById("messagesList");
                if (!messagesList) {
                    console.error("❌ [ERROR] messagesList НЕ е намерен в DOM!");
                    return;
                }

                messagesList.innerHTML = ""; // Изчистване на предишните съобщения

                messages.forEach(msg => {
                    let senderName = msg.senderName || "Анонимен";
                    let content = msg.content || "(Празно съобщение)";
                    let profilePicture = msg.messageSenderProfilePictureURL?.trim() || "/images/default-avatar.jpg";
                    addMessageToChat(senderName, content, profilePicture);
                });

                // Скрол надолу при зареждане на съобщенията
                messagesList.scrollTop = messagesList.scrollHeight;
            })
            .catch(err => console.error("❌ ГРЕШКА при зареждане на съобщенията:", err));
    }

    function addMessageToChat(user, message, profilePictureUrl) {
        let messagesList = document.getElementById("messagesList");
        if (!messagesList) {
            console.error("❌ messagesList не е намерен!");
            return;
        }

        let li = document.createElement("li");
        li.style.display = "flex";
        li.style.alignItems = "center";
        li.style.marginBottom = "10px";

        let img = document.createElement("img");
        img.src = profilePictureUrl;
        img.alt = user;
        img.style.width = "40px";
        img.style.height = "40px";
        img.style.borderRadius = "50%";
        img.style.marginRight = "10px";

        let messageDiv = document.createElement("div");
        messageDiv.innerHTML = `<strong>${user}</strong><br>${message}`;
        messageDiv.style.background = "#f1f1f1";
        messageDiv.style.padding = "10px";
        messageDiv.style.borderRadius = "10px";
        messageDiv.style.maxWidth = "60%";

        li.appendChild(img);
        li.appendChild(messageDiv);
        messagesList.appendChild(li);

        // Автоматично скролване надолу при ново съобщение
        messagesList.scrollTop = messagesList.scrollHeight;
    }

    // 📡 Получаване на съобщения в реално време чрез SignalR
    connection.on("ReceiveMessage", function (user, message, profilePictureUrl) {
        addMessageToChat(user, message, profilePictureUrl);
    });

    document.getElementById("sendButton").addEventListener("click", function () {
        var messageContent = document.getElementById("messageInput").value.trim();
        if (!currentConversationId || !messageContent) {
            alert("⚠️ Няма избран разговор или празно съобщение!");
            return;
        }

        var message = {
            conversationId: currentConversationId,
            content: messageContent
        };

        // Вземане на CSRF токен
        let tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
        let token = tokenElement ? tokenElement.value : "";

        fetch(sendMessageUrl, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
            },
            body: JSON.stringify(message)
        })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => { throw new Error(err.message || "⚠️ Грешка при изпращане!"); });
                }
                return response.json();
            })
            .then(() => {
                document.getElementById("messageInput").value = "";

                // 🔥 Добавяне на съобщението веднага в UI, без да чакаме SignalR
                addMessageToChat(currentUserName, messageContent, currentUserProfilePicture);

               

                // Изпращане през SignalR
                connection.invoke("SendMessage", currentConversationId, currentUserName, messageContent, currentUserProfilePicture)
                    .catch(err => console.error("❌ Грешка при SignalR изпращане:", err));
            })
            .catch(error => console.error("❌ Грешка при изпращане:", error));
    });

</script>
