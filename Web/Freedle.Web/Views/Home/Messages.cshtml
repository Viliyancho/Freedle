@using Freedle.Web.ViewModels
@model MessagesViewModel

@{
    ViewData["Title"] = "Messages";
}

<h2 class="title">Messages</h2>
@Html.AntiForgeryToken()
<input type="hidden" id="csrfToken" value="" />

<div class="chat-container">
    <div class="chat-list">
        <h3>Your Conversations</h3>
        <ul>
            @foreach (var conversation in Model.Conversations)
            {
                <li>
                    <a href="#" onclick="event.preventDefault(); loadChat(@conversation.Id, '@conversation.OtherUserName');">
                        <img src="@conversation.OtherUserProfilePicture" class="profile-img" alt="Profile Picture">
                        <span class="username">@conversation.OtherUserName</span>
                    </a>
                </li>
            }
        </ul>
    </div>

    <div class="chat-box">
        <div class="chat-header">
            <h3 id="chatHeader">Select a conversation</h3>
        </div>
        <div class="chat-messages">
            <ul id="messagesList"></ul>
        </div>
        <div class="chat-input">
            <input type="text" id="messageInput" placeholder="Type your message..." disabled />
            <button id="sendButton" disabled>Send</button>
        </div>
    </div>
</div>

<style>
    body {
        background: linear-gradient(to bottom, skyblue, lightgray);
        font-family: Arial, sans-serif;
        text-align: center;
    }

    .title {
        font-size: 36px;
        font-weight: bold;
        text-transform: uppercase;
        background: linear-gradient(to right, #007bff, #00c6ff);
        -webkit-background-clip: text;
        color: transparent;
        text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
    }

    .chat-container {
        display: flex;
        height: 80vh;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .chat-list {
        width: 30%;
        background: linear-gradient(to bottom, skyblue, lightgrey);
        padding: 15px;
        border-right: 2px solid transparent;
        overflow-y: auto;
        border-radius: 10px 10px 10px 0; /* Закръгляне на горен и долен десен ъгъл */
    }

        .chat-list ul {
            list-style: none;
            padding: 0;
        }

        .chat-list li {
            padding: 12px;
            margin: 5px 0;
            border-radius: 15px;
            background: rgba(255, 255, 255, 0.7);
            transition: transform 0.3s, background 0.3s;
            display: flex;
            align-items: center;
            gap: 10px;
        }

            .chat-list li:hover {
                background: rgba(200, 200, 200, 0.9);
                transform: scale(1.05);
            }

            /* Направи цялото поле линк */
            .chat-list li a {
                display: flex;
                align-items: center;
                gap: 10px;
                width: 100%; /* Целият контейнер е кликваем */
                text-decoration: none;
                color: inherit;
            }

    .profile-img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
        border: none;
    }

    .username {
        font-weight: bold;
        color: #333;
    }

    

    .chat-box {
        width: 70%;
        display: flex;
        flex-direction: column;
        padding: 15px;
        background: white;
        backdrop-filter: blur(5px);
        border-radius: 10px;
        box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .chat-header {
        font-size: 20px;
        font-weight: bold;
        padding-bottom: 10px;
        border-bottom: 1px solid #ddd;
        text-align: center;
    }

    .chat-messages {
        flex-grow: 1;
        overflow-y: auto;
        padding: 10px;
    }

    .chat-input {
        display: flex;
        gap: 10px;
        padding-top: 10px;
    }

        .chat-input input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            transition: box-shadow 0.3s;
        }

            .chat-input input:focus {
                box-shadow: 0 0 5px #007bff;
            }

        .chat-input button {
            background: #007bff;
            color: #fff;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            transition: background 0.3s;
        }

            .chat-input button:hover:not(:disabled) {
                background: #0056b3;
            }

            .chat-input button:disabled {
                background: #ccc;
                cursor: not-allowed;
            }
</style>


<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>

    var currentConversationId = "@Model.SelectedConversationId" || null;
    var currentUserName = "@Model.CurrentUserName";
    var currentUserProfilePicture = "@Model.CurrentUserProfilePicture" || "/images/default-avatar.jpg";
    var sendMessageUrl = "@Url.Action("SendMessage", "Home")";
    var messagesUrl = "@Url.Action("Messages", "Home")";

    var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

    connection.start()
        .then(() => console.log("SignalR стартиран успешно!"))
        .catch(err => console.error("Грешка при стартиране на SignalR:", err));

    

    function loadChat(conversationId, userName) {
        currentConversationId = conversationId;
        document.getElementById("chatHeader").innerText = "Chat with " + userName;
        document.getElementById("messageInput").disabled = false;
        document.getElementById("sendButton").disabled = false;
        loadMessages(conversationId);

        // Присъединяване към SignalR група за този разговор
        connection.invoke("JoinConversation", conversationId)
            .catch(err => console.error("Грешка при присъединяване към разговора:", err));
    }

    function loadMessages(conversationId) {
        fetch(`/Home/GetMessages?conversationId=${conversationId}`)
            .then(response => response.json())
            .then(messages => {
                console.log("Получени съобщения:", messages);
                if (!Array.isArray(messages)) {
                    console.error("Получените данни не са масив!", messages);
                    return;
                }

                let messagesList = document.getElementById("messagesList");
                if (!messagesList) {
                    console.error("messagesList НЕ е намерен в DOM!");
                    return;
                }

                messagesList.innerHTML = "";

                messages.forEach(msg => {
                    let senderName = msg.senderName || "Анонимен";
                    let content = msg.content || "(Празно съобщение)";
                    let profilePicture = msg.messageSenderProfilePictureURL?.trim() || "/images/default-avatar.jpg";
                    let sentOn = msg.sentOn || new Date().toISOString();
                    let id = typeof msg.messageId !== "undefined" && msg.messageId !== null ? msg.messageId : -1;
                    addMessageToChat(senderName, content, profilePicture, sentOn, id);
                });

                setTimeout(() => {
                    let messagesContainer = document.querySelector(".chat-messages");
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                }, 100);

            })
            .catch(err => console.error("Грешка при зареждане на съобщенията:", err));
    }

    function addMessageToChat(user, message, profilePictureUrl, sentOn, messageId) {
        let messagesList = document.getElementById("messagesList");
        if (!messagesList) {
            console.error("messagesList не е намерен!");
            return;
        }

        let isCurrentUser = user === currentUserName;

        let li = document.createElement("li");
        li.style.display = "flex";
        li.style.flexDirection = "column";
        li.style.alignItems = isCurrentUser ? "flex-end" : "flex-start";
        li.style.marginBottom = "10px";
        li.style.width = "100%";
        li.setAttribute("data-message-id", messageId); // Запази ID-то на съобщението

        let sentDate = sentOn ? new Date(sentOn) : new Date();
        let formattedDate = sentDate.toLocaleString("bg-BG", {
            year: "numeric",
            month: "short",
            day: "numeric",
            hour: "2-digit",
            minute: "2-digit"
        });

        let messageContainer = document.createElement("div");
        messageContainer.style.display = "flex";
        messageContainer.style.alignItems = "center";
        messageContainer.style.gap = "8px";
        messageContainer.style.position = "relative";

        let img = document.createElement("img");
        img.src = profilePictureUrl;
        img.alt = user;
        img.style.width = "35px";
        img.style.height = "35px";
        img.style.borderRadius = "50%";

        let textContainer = document.createElement("div");
        textContainer.style.display = "flex";
        textContainer.style.flexDirection = "column";
        textContainer.style.alignItems = "flex-end"; // Центриране на времето

        let timeDiv = document.createElement("div");
        timeDiv.innerText = formattedDate;
        timeDiv.style.fontSize = "12px";
        timeDiv.style.color = "gray";
        timeDiv.style.marginBottom = "3px";
        timeDiv.style.textAlign = "center";

        let nameDiv = document.createElement("strong");
        nameDiv.innerText = user;
        nameDiv.style.fontSize = "14px";
        nameDiv.style.marginBottom = "2px";

        let messageDiv = document.createElement("div");
        messageDiv.innerText = message;
        messageDiv.style.padding = "10px";
        messageDiv.style.borderRadius = "10px";
        messageDiv.style.wordWrap = "break-word";
        messageDiv.style.whiteSpace = "pre-wrap";
        messageDiv.style.overflowWrap = "break-word";
        messageDiv.style.background = isCurrentUser ? "#F5F5F5" : "#E3F2FD";
        messageDiv.style.textAlign = "left";
        messageDiv.style.display = "block";
        messageDiv.style.width = "auto";
        messageDiv.style.maxWidth = "100%";
        messageDiv.style.wordBreak = "break-word";

        // Добавяме времето най-отгоре
        textContainer.appendChild(timeDiv);
        textContainer.appendChild(nameDiv);
        textContainer.appendChild(messageDiv);

        if (isCurrentUser) {
            let deleteButton = document.createElement("button");
            deleteButton.innerHTML = "🗑️"; // 🗑️
            deleteButton.style.background = "red";
            deleteButton.style.color = "white";
            deleteButton.style.border = "none";
            deleteButton.style.borderRadius = "5px";
            deleteButton.style.padding = "5px";
            deleteButton.style.marginLeft = "6px";
            deleteButton.style.cursor = "pointer";
            deleteButton.style.position = "relative";
            deleteButton.style.top = "22px";

            deleteButton.addEventListener("click", function () {
                deleteMessage(messageId, li);
            }, { passive: true });

            messageContainer.appendChild(deleteButton);
            messageContainer.appendChild(textContainer);
            messageContainer.appendChild(img);
        } else {
            messageContainer.appendChild(img);
            messageContainer.appendChild(textContainer);
        }

        li.appendChild(messageContainer);
        messagesList.appendChild(li);

        setTimeout(() => {
            let messagesContainer = document.querySelector(".chat-messages");
            if (messagesContainer) {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
        }, 100);
    }





    // Получаване на съобщения в реално време чрез SignalR
    connection.on("ReceiveMessage", function (user, message, profilePictureUrl) {
        addMessageToChat(user, message, profilePictureUrl);
    });

    document.getElementById("sendButton").addEventListener("click", function () {
        var messageContent = document.getElementById("messageInput").value.trim();
        if (!currentConversationId || !messageContent) {
            alert("Няма избран разговор или празно съобщение!");
            return;
        }

        var message = {
            conversationId: currentConversationId,
            content: messageContent
        };

        let tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
        let token = tokenElement ? tokenElement.value : "";

        fetch(sendMessageUrl, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
            },
            body: JSON.stringify(message)
        })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => { throw new Error(err.message || "Грешка при изпращане!"); });
                }
                return response.json();
            })
            .then(() => {
                document.getElementById("messageInput").value = "";

                // Добавяне на съобщението веднага в UI, без да чакаме SignalR
                addMessageToChat(currentUserName, messageContent, currentUserProfilePicture);

               

                connection.invoke("SendMessage", currentConversationId, currentUserName, messageContent, currentUserProfilePicture)
                    .catch(err => console.error("❌ Грешка при SignalR изпращане:", err));
            })
            .catch(error => console.error("❌ Грешка при изпращане:", error));
    });


    function deleteMessage(messageId, messageElement) {
        console.log("ID на съобщението:", messageId); // Проверка дали ID-то е валидно
        if (!confirm("Сигурен ли си, че искаш да изтриеш това съобщение?")) return;

        let tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
        let token = tokenElement ? tokenElement.value : "";

        fetch(`/Home/DeleteMessage?id=${messageId}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "RequestVerificationToken": token
            }
        })

            .then(response => {
                if (!response.ok) throw new Error("Грешка при изтриване!");
                return response.json();
            })
            .then(data => {
                alert(data.message);
                messageElement.remove();
            })
            .catch(error => console.error("❌ Грешка при изтриване:", error));
    }



    document.getElementById("messageInput").addEventListener("keypress", function (event) {
        if (event.key === "Enter") {
            event.preventDefault();
            document.getElementById("sendButton").click();
        }
    });

</script>
