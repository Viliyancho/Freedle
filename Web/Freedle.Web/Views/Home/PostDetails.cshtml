@model Freedle.Web.ViewModels.PostViewModel

<style>
    body {
        background: linear-gradient(to bottom, skyblue, lightgray);
        font-family: Arial, sans-serif;
        padding: 20px;
    }

    .post-card {
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        transition: transform 0.3s ease-in-out;
    }

        .post-card:hover {
            transform: scale(1.02);
        }

    .card-header, .card-footer {
        background: rgba(255, 255, 255, 0.9);д
        padding: 10px 15px;
        border-radius: 10px;
    }

    .card-body {
        padding: 15px;
        text-align: center;
    }

    button {
        transition: all 0.3s ease;
    }

        button:hover {
            transform: translateY(-2px);
        }

    .comment, .reply {
        background: rgba(255, 255, 255, 0.8);
        border-radius: 5px;
        padding: 10px;
        margin-top: 10px;
        transition: opacity 0.3s ease-in-out;
    }

        .comment:hover, .reply:hover {
            opacity: 0.9;
        }

    textarea {
        transition: box-shadow 0.3s;
    }

        textarea:focus {
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        }
</style>

<div class="card mb-4 post-card">
    <div class="card-header d-flex align-items-center">
        <img src="@Model.AuthorProfilePictureUrl" class="rounded-circle me-2" width="40" height="40" />
        <strong>@Model.AuthorName</strong>
        <span class="text-muted ms-auto">@Model.CreatedOn</span>
        @if (Model.AuthorId == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value || User.IsInRole("Admin"))
        {
            <button class="btn btn-danger btn-sm ms-2 delete-post" data-post-id="@Model.Id" title="Delete Post">🗑️</button>
        }

    </div>

    <div class="card-body d-flex flex-column align-items-center">
        @if (!string.IsNullOrEmpty(Model.ImageUrl))
        {
            <img src="@Model.ImageUrl" class="rounded border border-8 border-dark shadow-lg mb-2"
                 alt="Post image" style="max-width: 75%; height: auto; display: block; margin: auto;" />
        }
        <p class="card-text">@Model.Content</p>
    </div>

    <div class="card-footer d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center gap-2">
            <form method="post" action="@Url.Action("ToggleLike", "Home")">
                @Html.AntiForgeryToken()
                <input type="hidden" name="postId" value="@Model.Id" />
                <button type="submit" class="btn @(Model.IsLikedByCurrentUser ? "btn-primary" : "btn-outline-primary") btn-sm">
                    👍 <span class="like-count">@Model.LikeCount</span>
                </button>
            </form>
            <a href="#comments-section" class="btn btn-outline-secondary btn-sm">💬 Comments</a>
        </div>
    </div>
</div>

<h4 id="comments-section">Comments</h4>

@if (Model.Comments.Any())
{
    @foreach (var comment in Model.Comments)
    {
        <div class="comment">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <img src="@comment.AuthorProfilePictureUrl" class="rounded-circle me-2" width="30" height="30" />
                    <strong>@comment.AuthorName</strong>
                </div>
                @if (comment.AuthorId == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value
               || User.IsInRole("Admin")
               || Model.AuthorId == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value)
                {
                    <button class="btn btn-danger btn-sm delete-comment" data-comment-id="@comment.Id">🗑️</button>
                }

            </div>
            <p>@comment.CommentText</p>
            <span class="text-muted">@comment.PostedOn</span>
            <button class="btn btn-primary btn-sm reply-button mt-2" data-comment-id="@comment.Id">Reply</button>

            <div class="reply-form mt-2" id="reply-form-@comment.Id" style="display: none;">
                <textarea class="form-control reply-textarea" placeholder="Write a reply..."></textarea>
                <button class="btn btn-success btn-sm mt-2 submit-reply" data-comment-id="@comment.Id">Publish</button>
            </div>

            @if (comment.Replies.Any())
{
    <div class="mt-3 ms-4">
        @foreach (var reply in comment.Replies)
        {
            <div class="reply d-flex justify-content-between align-items-start">
                <div class="d-flex">
                    <span class="text-primary me-2">➥</span>
                    <div>
                        <img src="@reply.AuthorProfilePictureUrl" class="rounded-circle me-2" width="25" height="25" />
                        <strong>@reply.AuthorName</strong>
                        <p>@reply.CommentText</p>
                        <span class="text-muted">@reply.PostedOn</span>
                    </div>
                </div>

                            @if (reply.AuthorId == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value
                           || User.IsInRole("Admin")
                           || Model.AuthorId == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value)
                            {
                                <button class="btn btn-danger btn-sm delete-reply" data-reply-id="@reply.Id">🗑️</button>
                            }

            </div>
        }
    </div>
}


        </div>
    }
}
else
{
    <p>No comments yet.</p>
}

<form method="post" action="@Url.Action("AddComment", "Home")">
    @Html.AntiForgeryToken()
    <input type="hidden" name="postId" value="@Model.Id" />
    <textarea name="commentText" class="form-control" placeholder="Add a comment..." required></textarea>
    <button type="submit" class="btn btn-primary mt-2">Publish</button>
</form>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Показване/скриване на формата за отговори
        document.querySelectorAll(".reply-button").forEach(button => {
            button.addEventListener("click", function () {
                let replyForm = document.getElementById("reply-form-" + this.dataset.commentId);
                replyForm.style.display = replyForm.style.display === "none" ? "block" : "none";
            });
        });

        document.querySelectorAll(".delete-post").forEach(button => {
            button.addEventListener("click", function () {
                if (confirm("Are you sure you want to delete this post?")) {
                    let token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                    // Изпращаме POST заявка за изтриване на поста
                    fetch("@Url.Action("DeletePost", "Home")", {
                        method: "POST",
                        headers: { "Content-Type": "application/x-www-form-urlencoded" },
                        body: `postId=${this.dataset.postId}&__RequestVerificationToken=${token}`
                    })
                        .then(response => {
                            if (response.ok) {
                                location.href = "/Home/Index"; // Пренасочваме към началната страница след успешно изтриване
                            } else {
                                response.text().then(text => alert("Error: " + text)); // Ако има грешка, показваме съобщение
                            }
                        })
                        .catch(error => console.error("Fetch error:", error)); // Ако има грешка със заявката
                }
            });
        });


        // Изтриване на коментар
        document.querySelectorAll(".delete-comment").forEach(button => {
            button.addEventListener("click", function () {
                if (confirm("Are you sure you want to delete this comment?")) {
                    let token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                    fetch("@Url.Action("DeleteComment", "Home")", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        body: `commentId=${this.dataset.commentId}&__RequestVerificationToken=${token}`
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                location.reload(); // Презарежда страницата след успешно изтриване
                            } else {
                                alert("Error deleting comment.");
                            }
                        })
                        .catch(error => {
                            console.error("Fetch error:", error);
                            alert("An error occurred while deleting the comment.");
                        });
                }
            });
        });


        document.querySelectorAll(".delete-reply").forEach(button => {
            button.addEventListener("click", function () {
                if (confirm("Are you sure you want to delete this reply?")) {
                    let token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                    fetch("@Url.Action("DeleteReply", "Home")", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        body: `replyId=${this.dataset.replyId}&__RequestVerificationToken=${token}`
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                location.reload(); // Презарежда страницата след успешно изтриване
                            } else {
                                alert("Error deleting reply.");
                            }
                        })
                        .catch(error => {
                            console.error("Fetch error:", error);
                            alert("An error occurred while deleting the reply.");
                        });
                }
            });
        });


        document.querySelectorAll(".submit-reply").forEach(button => {
            button.addEventListener("click", function () {
                let commentId = this.dataset.commentId;
                let replyText = document.querySelector(`#reply-form-${commentId} textarea`).value.trim();
                let postId = document.querySelector("input[name='postId']").value; // Взимаме postId от hidden полето

                if (!replyText) {
                    alert("Reply cannot be empty!");
                    return;
                }

                let token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                fetch("/Home/AddReply", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded"
                    },
                    body: `commentId=${commentId}&postId=${postId}&replyText=${encodeURIComponent(replyText)}&__RequestVerificationToken=${token}`
                })
                    .then(response => response.json()) // Очакваме JSON
                    .then(data => {
                        if (data.success) {
                            location.reload(); // Презареждаме, ако всичко е ОК
                        } else {
                            alert("Error: " + data.message);
                        }
                    })
                    .catch(error => {
                        console.error("Fetch error:", error);
                        alert("An error occurred while adding the reply.");
                    });
            });
        });

    });
</script>
